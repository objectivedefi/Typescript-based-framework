import { Assessment, RiskAssessmentFramework } from "../framework/types";
import * as fs from "fs";
import * as path from "path";

export interface MarkdownOptions {
  outputPath?: string;
  includeReferences?: boolean;
  includeLLMOutput?: boolean;
  includeGuide?: boolean;
}

/**
 * Generates a markdown report from an assessment following the framework template
 */
export function generateMarkdownReport(
  assessment: Assessment,
  framework: RiskAssessmentFramework,
  options: MarkdownOptions = {}
): string {
  const {
    includeReferences = true,
    includeLLMOutput = true,
    includeGuide = false,
  } = options;

  let markdown = "";

  // Header
  markdown += `# ${framework.title}\n\n`;
  markdown += `**Asset:** ${assessment.asset}\n\n`;
  markdown += `**Issuer:** ${assessment.issuer}\n\n`;
  markdown += `**Framework ID:** ${assessment.frameworkId}\n\n`;
  markdown += `**Generated:** ${new Date().toISOString()}\n\n`;
  markdown += "---\n\n";

  // Table of Contents
  markdown += "## Table of Contents\n\n";
  framework.sections.forEach((section, index) => {
    markdown += `${index + 1}. [${section.title}](#${section.title.toLowerCase().replace(/\s+/g, "-").replace(/[^\w-]/g, "")})\n`;
  });
  markdown += "\n---\n\n";

  // Sections
  framework.sections.forEach((section) => {
    const result = assessment.results[section.id];
    if (!result) return;

    markdown += `## ${result.title}\n\n`;

    // LLM Output (if available and requested)
    if (includeLLMOutput && result.llm) {
      markdown += "### Analysis\n\n";
      markdown += `${result.llm}\n\n`;
    }

    // Framework Guide (if requested)
    if (includeGuide && result.guide) {
      markdown += "### Framework Guide\n\n";
      markdown += "```\n";
      markdown += result.guide;
      markdown += "\n```\n\n";
    }

    // References (if available and requested)
    if (includeReferences && result.references && result.references.length > 0) {
      markdown += "### References\n\n";
      result.references.forEach((ref: any, index: number) => {
        markdown += `${index + 1}. [${ref.url}](${ref.url})\n`;
        if (ref.scrapedContent && ref.scrapedContent.length > 0) {
          const preview = ref.scrapedContent.substring(0, 200);
          markdown += `   - *Preview:* ${preview}${ref.scrapedContent.length > 200 ? "..." : ""}\n`;
        }
      });
      markdown += "\n";
    }

    markdown += "---\n\n";
  });

  // Footer
  markdown += `*Report generated by Risk Assessment Framework at ${new Date().toISOString()}*\n`;

  return markdown;
}

/**
 * Saves a markdown report to a file
 */
export async function saveMarkdownReport(
  assessment: Assessment,
  framework: RiskAssessmentFramework,
  outputPath: string,
  options: MarkdownOptions = {}
): Promise<void> {
  const markdown = generateMarkdownReport(assessment, framework, options);
  
  // Ensure directory exists
  const dir = path.dirname(outputPath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }

  // Write file
  fs.writeFileSync(outputPath, markdown, "utf8");
}

/**
 * Generates a default filename for the markdown report
 */
export function generateDefaultMarkdownFilename(assessment: Assessment): string {
  const timestamp = new Date().toISOString().replace(/[:.]/g, "-").split("T")[0];
  const assetName = assessment.asset.replace(/[^a-zA-Z0-9]/g, "_");
  return `outputs/${assetName}_risk_assessment_${timestamp}.md`;
}

